FollowSet(0) 'start':  '$'
FollowSet(1) 'primary_expression':  '[' | '(' | '.' | 'PTR_OP' | 'INC_OP' | 'DEC_OP' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL'
FollowSet(2) 'postfix_expression':  '=' | 'MUL_ASSIGN' | 'DIV_ASSIGN' | 'MOD_ASSIGN' | 'ADD_ASSIGN' | 'SUB_ASSIGN' | 'LEFT_ASSIGN' | 'RIGHT_ASSIGN' | 'AND_ASSIGN' | 'XOR_ASSIGN' | 'OR_ASSIGN' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | 'assignment_expression_tail' | '/' | '%' | 'LEFT_OP' | 'RIGHT_OP' | '<' | '>' | 'LE_OP' | 'GE_OP' | 'EQ_OP' | 'NE_OP' | '^' | '|' | 'AND_OP' | 'OR_OP' | '?' | ',' | ')' | ']' | ':' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | '}'
FollowSet(3) 'postfix_expression_tail':  '=' | 'MUL_ASSIGN' | 'DIV_ASSIGN' | 'MOD_ASSIGN' | 'ADD_ASSIGN' | 'SUB_ASSIGN' | 'LEFT_ASSIGN' | 'RIGHT_ASSIGN' | 'AND_ASSIGN' | 'XOR_ASSIGN' | 'OR_ASSIGN' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | 'assignment_expression_tail' | '/' | '%' | 'LEFT_OP' | 'RIGHT_OP' | '<' | '>' | 'LE_OP' | 'GE_OP' | 'EQ_OP' | 'NE_OP' | '^' | '|' | 'AND_OP' | 'OR_OP' | '?' | ',' | ')' | ']' | ':' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | '}'
FollowSet(4) 'primary_expression_ops':  'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | '=' | 'MUL_ASSIGN' | 'DIV_ASSIGN' | 'MOD_ASSIGN' | 'ADD_ASSIGN' | 'SUB_ASSIGN' | 'LEFT_ASSIGN' | 'RIGHT_ASSIGN' | 'AND_ASSIGN' | 'XOR_ASSIGN' | 'OR_ASSIGN' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | 'assignment_expression_tail' | '/' | '%' | 'LEFT_OP' | 'RIGHT_OP' | '<' | '>' | 'LE_OP' | 'GE_OP' | 'EQ_OP' | 'NE_OP' | '^' | '|' | 'AND_OP' | 'OR_OP' | '?' | ',' | ')' | ']' | ':' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | '}'
FollowSet(5) 'primary_expression_ops_args':  'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | '=' | 'MUL_ASSIGN' | 'DIV_ASSIGN' | 'MOD_ASSIGN' | 'ADD_ASSIGN' | 'SUB_ASSIGN' | 'LEFT_ASSIGN' | 'RIGHT_ASSIGN' | 'AND_ASSIGN' | 'XOR_ASSIGN' | 'OR_ASSIGN' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | 'assignment_expression_tail' | '/' | '%' | 'LEFT_OP' | 'RIGHT_OP' | '<' | '>' | 'LE_OP' | 'GE_OP' | 'EQ_OP' | 'NE_OP' | '^' | '|' | 'AND_OP' | 'OR_OP' | '?' | ',' | ')' | ']' | ':' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | '}'
FollowSet(6) 'unary_expression':  '=' | 'MUL_ASSIGN' | 'DIV_ASSIGN' | 'MOD_ASSIGN' | 'ADD_ASSIGN' | 'SUB_ASSIGN' | 'LEFT_ASSIGN' | 'RIGHT_ASSIGN' | 'AND_ASSIGN' | 'XOR_ASSIGN' | 'OR_ASSIGN' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | 'assignment_expression_tail' | '/' | '%' | 'LEFT_OP' | 'RIGHT_OP' | '<' | '>' | 'LE_OP' | 'GE_OP' | 'EQ_OP' | 'NE_OP' | '^' | '|' | 'AND_OP' | 'OR_OP' | '?' | ',' | ')' | ']' | ':' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | '}'
FollowSet(7) 'unary_expression_prefix':  'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | '=' | 'MUL_ASSIGN' | 'DIV_ASSIGN' | 'MOD_ASSIGN' | 'ADD_ASSIGN' | 'SUB_ASSIGN' | 'LEFT_ASSIGN' | 'RIGHT_ASSIGN' | 'AND_ASSIGN' | 'XOR_ASSIGN' | 'OR_ASSIGN' | 'assignment_expression_tail' | '/' | '%' | 'LEFT_OP' | 'RIGHT_OP' | '<' | '>' | 'LE_OP' | 'GE_OP' | 'EQ_OP' | 'NE_OP' | '^' | '|' | 'AND_OP' | 'OR_OP' | '?' | ',' | ')' | ']' | ':' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | '}'
FollowSet(8) 'unary_expression_sizeof':  '=' | 'MUL_ASSIGN' | 'DIV_ASSIGN' | 'MOD_ASSIGN' | 'ADD_ASSIGN' | 'SUB_ASSIGN' | 'LEFT_ASSIGN' | 'RIGHT_ASSIGN' | 'AND_ASSIGN' | 'XOR_ASSIGN' | 'OR_ASSIGN' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | 'assignment_expression_tail'
FollowSet(9) 'unary_operator':  'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!'
FollowSet(10) 'cast_expression':  '*' | '/' | '%' | '=' | 'MUL_ASSIGN' | 'DIV_ASSIGN' | 'MOD_ASSIGN' | 'ADD_ASSIGN' | 'SUB_ASSIGN' | 'LEFT_ASSIGN' | 'RIGHT_ASSIGN' | 'AND_ASSIGN' | 'XOR_ASSIGN' | 'OR_ASSIGN' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '+' | '-' | '~' | '!' | 'assignment_expression_tail' | 'LEFT_OP' | 'RIGHT_OP' | '<' | '>' | 'LE_OP' | 'GE_OP' | 'EQ_OP' | 'NE_OP' | '^' | '|' | 'AND_OP' | 'OR_OP' | '?' | ',' | ')' | ']' | ':' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | '}'
FollowSet(11) 'type_name_paren':  'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | '=' | 'MUL_ASSIGN' | 'DIV_ASSIGN' | 'MOD_ASSIGN' | 'ADD_ASSIGN' | 'SUB_ASSIGN' | 'LEFT_ASSIGN' | 'RIGHT_ASSIGN' | 'AND_ASSIGN' | 'XOR_ASSIGN' | 'OR_ASSIGN' | 'assignment_expression_tail'
FollowSet(12) 'multiplicative_expression':  '+' | '-' | 'LEFT_OP' | 'RIGHT_OP' | '<' | '>' | 'LE_OP' | 'GE_OP' | 'EQ_OP' | 'NE_OP' | '&' | '^' | '|' | 'AND_OP' | 'OR_OP' | '?' | ',' | ')' | ']' | ':' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '*' | '~' | '!' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | '}'
FollowSet(13) 'multiplicative_expression_tail':  '+' | '-' | 'LEFT_OP' | 'RIGHT_OP' | '<' | '>' | 'LE_OP' | 'GE_OP' | 'EQ_OP' | 'NE_OP' | '&' | '^' | '|' | 'AND_OP' | 'OR_OP' | '?' | ',' | ')' | ']' | ':' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '*' | '~' | '!' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | '}'
FollowSet(14) 'additive_expression':  'LEFT_OP' | 'RIGHT_OP' | '<' | '>' | 'LE_OP' | 'GE_OP' | 'EQ_OP' | 'NE_OP' | '&' | '^' | '|' | 'AND_OP' | 'OR_OP' | '?' | ',' | ')' | ']' | ':' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '*' | '+' | '-' | '~' | '!' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | '}'
FollowSet(15) 'additive_expression_tail':  'LEFT_OP' | 'RIGHT_OP' | '<' | '>' | 'LE_OP' | 'GE_OP' | 'EQ_OP' | 'NE_OP' | '&' | '^' | '|' | 'AND_OP' | 'OR_OP' | '?' | ',' | ')' | ']' | ':' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '*' | '+' | '-' | '~' | '!' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | '}'
FollowSet(16) 'shift_expression':  '<' | '>' | 'LE_OP' | 'GE_OP' | 'EQ_OP' | 'NE_OP' | '&' | '^' | '|' | 'AND_OP' | 'OR_OP' | '?' | ',' | ')' | ']' | ':' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '*' | '+' | '-' | '~' | '!' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | '}'
FollowSet(17) 'shift_expression_tail':  '<' | '>' | 'LE_OP' | 'GE_OP' | 'EQ_OP' | 'NE_OP' | '&' | '^' | '|' | 'AND_OP' | 'OR_OP' | '?' | ',' | ')' | ']' | ':' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '*' | '+' | '-' | '~' | '!' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | '}'
FollowSet(18) 'relational_expression':  'EQ_OP' | 'NE_OP' | '&' | '^' | '|' | 'AND_OP' | 'OR_OP' | '?' | ',' | ')' | ']' | ':' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '*' | '+' | '-' | '~' | '!' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | '}'
FollowSet(19) 'relational_expression_tail':  'EQ_OP' | 'NE_OP' | '&' | '^' | '|' | 'AND_OP' | 'OR_OP' | '?' | ',' | ')' | ']' | ':' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '*' | '+' | '-' | '~' | '!' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | '}'
FollowSet(20) 'equality_expression':  '&' | '^' | '|' | 'AND_OP' | 'OR_OP' | '?' | ',' | ')' | ']' | ':' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '*' | '+' | '-' | '~' | '!' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | '}'
FollowSet(21) 'equality_expression_tail':  '&' | '^' | '|' | 'AND_OP' | 'OR_OP' | '?' | ',' | ')' | ']' | ':' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '*' | '+' | '-' | '~' | '!' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | '}'
FollowSet(22) 'and_expression':  '^' | '|' | 'AND_OP' | 'OR_OP' | '?' | ',' | ')' | ']' | ':' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | '}'
FollowSet(23) 'and_expression_tail':  '^' | '|' | 'AND_OP' | 'OR_OP' | '?' | ',' | ')' | ']' | ':' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | '}'
FollowSet(24) 'exclusive_or_expression':  '|' | 'AND_OP' | 'OR_OP' | '?' | ',' | ')' | ']' | ':' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | '}'
FollowSet(25) 'exclusive_or_expression_tail':  '|' | 'AND_OP' | 'OR_OP' | '?' | ',' | ')' | ']' | ':' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | '}'
FollowSet(26) 'inclusive_or_expression':  'AND_OP' | 'OR_OP' | '?' | ',' | ')' | ']' | ':' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | '}'
FollowSet(27) 'inclusive_or_expression_tail':  'AND_OP' | 'OR_OP' | '?' | ',' | ')' | ']' | ':' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | '}'
FollowSet(28) 'logical_and_expression':  'OR_OP' | '?' | ',' | ')' | ']' | ':' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | '}'
FollowSet(29) 'logical_and_expression_tail':  'OR_OP' | '?' | ',' | ')' | ']' | ':' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | '}'
FollowSet(30) 'logical_or_expression':  '?' | ',' | ')' | ']' | ':' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | '}'
FollowSet(31) 'logical_or_expression_tail':  '?' | ',' | ')' | ']' | ':' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | '}'
FollowSet(32) 'conditional_expression':  '?' | ',' | ')' | ']' | ':' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | '}'
FollowSet(33) 'conditional_expression_tail':  '?' | ',' | ')' | ']' | ':' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else'
FollowSet(34) 'assignment_expression':  ',' | ')' | ']' | ':' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | '?' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else'
FollowSet(35) 'assignment_operator':  'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!'
FollowSet(36) 'expression':  ')' | ']' | ':' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | '?' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else'
FollowSet(37) 'expression_tail':  ')' | ']' | ':' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | '?' | ';' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else'
FollowSet(38) 'constant_expression':  ']' | ',' | ';' | '}' | ':' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return'
FollowSet(39) 'declaration':  'typedef' | 'extern' | 'static' | 'auto' | 'register' | 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | ';' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | ')' | '}' | '$'
FollowSet(40) 'init_declarator_list_opt':  ';'
FollowSet(41) 'declaration_specifiers':  '*' | 'IDENTIFIER' | '(' | ';' | '[' | 'typedef' | 'extern' | 'static' | 'auto' | 'register' | 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile' | '{' | ',' | ')'
FollowSet(42) 'declaration_specifiers_prefix':  'typedef' | 'extern' | 'static' | 'auto' | 'register' | 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile' | '*' | 'IDENTIFIER' | '(' | ';' | '[' | '{' | ',' | ')'
FollowSet(43) 'declaration_specifiers_tail':  '*' | 'IDENTIFIER' | '(' | ';' | '[' | 'typedef' | 'extern' | 'static' | 'auto' | 'register' | 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile' | '{' | ',' | ')'
FollowSet(44) 'init_declarator_list':  ';'
FollowSet(45) 'init_declarator_list_tail':  ';'
FollowSet(46) 'init_declarator':  ',' | ';'
FollowSet(47) 'init_declarator_suffix':  ',' | ';'
FollowSet(48) 'storage_class_specifier':  'typedef' | 'extern' | 'static' | 'auto' | 'register' | 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile' | '*' | 'IDENTIFIER' | '(' | ';' | '[' | '{' | ',' | ')'
FollowSet(49) 'type_specifier':  'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile' | 'typedef' | 'extern' | 'static' | 'auto' | 'register' | '*' | 'IDENTIFIER' | '(' | ';' | '[' | '{' | ',' | ')' | ':'
FollowSet(50) 'struct_or_union_specifier':  'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile' | 'typedef' | 'extern' | 'static' | 'auto' | 'register' | '*' | 'IDENTIFIER' | '(' | ';' | '[' | '{' | ',' | ')' | ':'
FollowSet(51) 'struct_or_union_specifier_suffix':  'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile' | 'typedef' | 'extern' | 'static' | 'auto' | 'register' | '*' | 'IDENTIFIER' | '(' | ';' | '[' | '{' | ',' | ')' | ':'
FollowSet(52) 'struct_or_union_specifier_suffix_list_opt':  'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile' | 'typedef' | 'extern' | 'static' | 'auto' | 'register' | '*' | 'IDENTIFIER' | '(' | ';' | '[' | '{' | ',' | ')' | ':'
FollowSet(53) 'struct_or_union':  'IDENTIFIER' | '{'
FollowSet(54) 'struct_declaration_list':  '}'
FollowSet(55) 'struct_declaration_list_tail':  '}'
FollowSet(56) 'struct_declaration':  'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile' | '}'
FollowSet(57) 'specifier_qualifier_list':  ':' | '*' | 'IDENTIFIER' | '(' | ';' | '[' | ')'
FollowSet(58) 'specifier_qualifier_list_opt':  ':' | '*' | 'IDENTIFIER' | '(' | ';' | '['
FollowSet(59) 'specifier_qualifier_list_prefix':  'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile' | 'typedef' | 'extern' | 'static' | 'auto' | 'register' | '*' | 'IDENTIFIER' | '(' | ';' | '[' | '{' | ',' | ')' | ':'
FollowSet(60) 'struct_declarator_list':  ';'
FollowSet(61) 'struct_declarator_list_tail':  ';'
FollowSet(62) 'struct_declarator':  ',' | ';'
FollowSet(63) 'struct_declarator_suffix':  ',' | ';'
FollowSet(64) 'enum_specifier':  'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile' | 'typedef' | 'extern' | 'static' | 'auto' | 'register' | '*' | 'IDENTIFIER' | '(' | ';' | '[' | '{' | ',' | ')' | ':'
FollowSet(65) 'enum_specifier_suffix':  'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile' | 'typedef' | 'extern' | 'static' | 'auto' | 'register' | '*' | 'IDENTIFIER' | '(' | ';' | '[' | '{' | ',' | ')' | ':'
FollowSet(66) 'enum_specifier_suffix_opt':  'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile' | 'typedef' | 'extern' | 'static' | 'auto' | 'register' | '*' | 'IDENTIFIER' | '(' | ';' | '[' | '{' | ',' | ')' | ':'
FollowSet(67) 'enumerator_list':  '}'
FollowSet(68) 'enumerator_list_tail':  '}'
FollowSet(69) 'enumerator':  ',' | '}'
FollowSet(70) 'enumerator_suffix':  ',' | '}'
FollowSet(71) 'type_qualifier':  'const' | 'volatile' | 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'typedef' | 'extern' | 'static' | 'auto' | 'register' | '*' | 'IDENTIFIER' | '(' | ';' | '[' | '{' | ',' | ')' | ':'
FollowSet(72) 'declarator':  '=' | ':' | ')' | 'typedef' | 'extern' | 'static' | 'auto' | 'register' | 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile' | '{' | ';' | ','
FollowSet(73) 'direct_declarator':  '=' | ':' | ')' | 'typedef' | 'extern' | 'static' | 'auto' | 'register' | 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile' | '{' | ';' | ','
FollowSet(74) 'direct_declarator_prefix':  '[' | '(' | 'IDENTIFIER'
FollowSet(75) 'direct_declarator_tail':  '=' | ':' | ')' | 'typedef' | 'extern' | 'static' | 'auto' | 'register' | 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile' | '{' | ';' | ','
FollowSet(76) 'direct_declarator_ops':  'IDENTIFIER' | '(' | '=' | ':' | ')' | 'typedef' | 'extern' | 'static' | 'auto' | 'register' | 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile' | '{' | ';' | ','
FollowSet(77) 'direct_declarator_ops_array':  'IDENTIFIER' | '(' | '=' | ':' | ')' | 'typedef' | 'extern' | 'static' | 'auto' | 'register' | 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile' | '{' | ';' | ','
FollowSet(78) 'direct_declarator_ops_func':  'IDENTIFIER' | '(' | '=' | ':' | ')' | 'typedef' | 'extern' | 'static' | 'auto' | 'register' | 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile' | '{' | ';' | ','
FollowSet(79) 'pointer':  'IDENTIFIER' | '(' | '[' | ')' | ',' | 'typedef' | 'extern' | 'static' | 'auto' | 'register' | 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile'
FollowSet(80) 'pointer_suffix':  'IDENTIFIER' | '(' | '[' | ')' | ',' | 'typedef' | 'extern' | 'static' | 'auto' | 'register' | 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile'
FollowSet(81) 'type_qualifier_list':  '*' | 'IDENTIFIER' | '(' | '[' | ')' | ',' | 'typedef' | 'extern' | 'static' | 'auto' | 'register' | 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile'
FollowSet(82) 'type_qualifier_list_tail':  '*' | 'IDENTIFIER' | '(' | '[' | ')' | ',' | 'typedef' | 'extern' | 'static' | 'auto' | 'register' | 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile'
FollowSet(83) 'parameter_type_list':  ')'
FollowSet(84) 'parameter_type_list_tail':  ')'
FollowSet(85) 'parameter_list':  'typedef' | 'extern' | 'static' | 'auto' | 'register' | 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile' | ',' | ')'
FollowSet(86) 'parameter_list_tail':  'typedef' | 'extern' | 'static' | 'auto' | 'register' | 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile' | ',' | ')'
FollowSet(87) 'parameter_declaration':  ',' | 'typedef' | 'extern' | 'static' | 'auto' | 'register' | 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile' | ')'
FollowSet(88) 'parameter_declaration_suffix':  ',' | 'typedef' | 'extern' | 'static' | 'auto' | 'register' | 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile' | ')'
FollowSet(89) 'identifier_list':  ')'
FollowSet(90) 'identifier_list_tail':  ')'
FollowSet(91) 'type_name':  ')'
FollowSet(92) 'type_name_suffix':  ')'
FollowSet(93) 'abstract_declarator':  ')' | ',' | 'typedef' | 'extern' | 'static' | 'auto' | 'register' | 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile'
FollowSet(94) 'abstract_declarator_suffix':  ')' | ',' | 'typedef' | 'extern' | 'static' | 'auto' | 'register' | 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile'
FollowSet(95) 'direct_abstract_declarator':  ')' | ',' | 'typedef' | 'extern' | 'static' | 'auto' | 'register' | 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile'
FollowSet(96) 'direct_abstract_declarator_suffix':  ')' | ',' | 'typedef' | 'extern' | 'static' | 'auto' | 'register' | 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile'
FollowSet(97) 'direct_abstract_declarator_paren_suffix':  ')' | ',' | 'typedef' | 'extern' | 'static' | 'auto' | 'register' | 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile'
FollowSet(98) 'direct_abstract_declarator_array':  ')' | ',' | 'typedef' | 'extern' | 'static' | 'auto' | 'register' | 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile'
FollowSet(99) 'direct_abstract_declarator_func':  ')' | ',' | 'typedef' | 'extern' | 'static' | 'auto' | 'register' | 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile'
FollowSet(100) 'initializer':  ',' | ';' | '}'
FollowSet(101) 'initializer_suffix':  ',' | ';' | '}'
FollowSet(102) 'initializer_list':  '}' | ','
FollowSet(103) 'initializer_list_tail':  '}' | ','
FollowSet(104) 'statement':  'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | ';' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | ')' | '}'
FollowSet(105) 'labeled_statement':  'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | ';' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | ')'
FollowSet(106) 'labeled_statement_prefix':  ':' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | ';' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return'
FollowSet(107) 'compound_statement':  'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | ';' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | ')' | '}'
FollowSet(108) 'compound_statement_suffix':  'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | ';' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | ')' | '}'
FollowSet(109) 'compound_statement_suffix_decl':  'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | ';' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | ')' | '}'
FollowSet(110) 'statement_list_opt':  '}'
FollowSet(111) 'declaration_list':  'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | ';' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | ')' | '}'
FollowSet(112) 'declaration_list_tail':  'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | ';' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | ')' | '}'
FollowSet(113) 'statement_list':  '}'
FollowSet(114) 'statement_list_tail':  '}'
FollowSet(115) 'expression_statement':  ';' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | ')' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | '}'
FollowSet(116) 'selection_statement':  'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | ';' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | ')' | '}'
FollowSet(117) 'selection_statement_suffix':  'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | ';' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | ')' | '}'
FollowSet(118) 'iteration_statement':  'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | ';' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | ')' | '}'
FollowSet(119) 'while_suffix':  'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | ';' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | ')' | '}'
FollowSet(120) 'expression_opt':  ')' | 'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | ';' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return'
FollowSet(121) 'jump_statement':  'LABEL_IDENTIFIER' | 'CASE' | 'DEFAULT' | '{' | ';' | 'IDENTIFIER' | 'CONSTANT' | 'STRING_LITERAL' | '(' | 'INC_OP' | 'DEC_OP' | 'SIZEOF' | '&' | '*' | '+' | '-' | '~' | '!' | 'if' | 'switch' | 'while' | 'do' | 'for' | 'GOTO' | 'CONTINUE' | 'BREAK' | 'return' | 'else' | ')' | '}'
FollowSet(122) 'translation_unit':  '$'
FollowSet(123) 'translation_unit_tail':  '$'
FollowSet(124) 'external_declaration':  'typedef' | 'extern' | 'static' | 'auto' | 'register' | 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile' | '*' | 'IDENTIFIER' | '(' | '$'
FollowSet(125) 'function_definition':  'typedef' | 'extern' | 'static' | 'auto' | 'register' | 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | 'TYPE_NAME' | 'struct' | 'union' | 'enum' | 'const' | 'volatile' | '*' | 'IDENTIFIER' | '(' | '$'
FollowSet(126) 'function_definition_decl_specifiers':  ';'
