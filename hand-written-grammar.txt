start:
<p>postfix_expression</p>

// PRIMARY EXPRESSIONS

primary_expression:
<p>IDENTIFIER</p>
<p>CONSTANT</p>
<p>STRING_LITERAL</p>
<p>( expression )</p>

postfix_expression:
<p>primary_expression postfix_expression_suffix</p>

postfix_expression_suffix:
<p>[ expression ] postfix_expression_suffix</p>
<p>( postfix_expression_suffix_paren</p>
<p>. IDENTIFIER postfix_expression_suffix</p>
<p>PTR_OP IDENTIFIER postfix_expression_suffix</p>
<p>INC_OP postfix_expression_suffix</p>
<p>DEC_OP postfix_expression_suffix</p>
<p>epsilon</p>

postfix_expression_suffix_paren:
<p>argument_expression_list ) postfix_expression_suffix</p>

argument_expression_list:
<p>assignment_expression argument_expression_list_suffix</p>
<p>epsilon</p>

argument_expression_list_suffix:
<p>, assignment_expression argument_expression_list_suffix</p>
<p>epsilon</p>

unary_expression:
<p>postfix_expression</p>
<p>INC_OP unary_expression</p>
<p>DEC_OP unary_expression</p>
<p>unary_operator cast_expression</p>
<p>SIZEOF unary_expression_sizeof</p>

unary_expression_sizeof:
<p>unary_expression</p>
<p>( type_name )</p>

unary_operator:
<p>&</p>
<p>*</p>
<p>+</p>
<p>-</p>
<p>~</p>
<p>!</p>

cast_expression:
<p>unary_expression</p>
<p>( type_name ) cast_expression</p>

// ARYTHMETIC EXPRESSIONS

multiplicative_expression:
<p>cast_expression multiplicative_expression_suffix</p>

multiplicative_expression_suffix:
<p>* cast_expression multiplicative_expression_suffix</p>
<p>/ cast_expression multiplicative_expression_suffix</p>
<p>% cast_expression multiplicative_expression_suffix</p>


additive_expression:
<p>multiplicative_expression additive_expression_suffix</p>

additive_expression_suffix:
<p>+ multiplicative_expression additive_expression_suffix</p>
<p>- multiplicative_expression additive_expression_suffix</p>

shift_expression:
<p>additive_expression shift_expression_suffix</p>

shift_expression_suffix:
<p>LEFT_OP additive_expression shift_expression_suffix</p>
<p>RIGHT_OP additive_expression shift_expression_suffix</p>

relational_expression:
<p>shift_expression relational_expression_suffix</p>

relational_expression_suffix:
<p>< shift_expression relational_expression_suffix</p>
<p>> shift_expression relational_expression_suffix</p>
<p>LE_OP shift_expression relational_expression_suffix</p>
<p>GE_OP shift_expression relational_expression_suffix</p>

equality_expression:
<p>relational_expression equality_expression_suffix</p>

equality_expression_suffix:
<p>EQ_OP relational_expression equality_expression_suffix</p>
<p>NE_OP relational_expression equality_expression_suffix</p>

and_expression:
<p>equality_expression and_expression_suffix</p>

and_expression_suffix:
<p>& equality_expression and_expression_suffix</p>

exclusive_or_expression:
<p>and_expression exclusive_or_expression_suffix</p>

exclusive_or_expression_suffix:
<p>^ and_expression exclusive_or_expression_suffix</p>
<p>epsilon</p>

inclusive_or_expression:
<p>exclusive_or_expression inclusive_or_expression_suffix</p>

inclusive_or_expression_suffix:
<p>| exclusive_or_expression inclusive_or_expression_suffix</p>
<p>epsilon</p>

logical_and_expression:
<p>inclusive_or_expression logical_and_expression_suffix</p>

logical_and_expression_suffix:
<p>AND_OP inclusive_or_expression logical_and_expression_suffix</p>
<p>epsilon</p>

logical_or_expression:
<p>logical_and_expression logical_or_expression_suffix</p>

logical_or_expression_suffix:
<p>OR_OP logical_and_expression logical_or_expression_suffix</p>
<p>epsilon</p>

conditional_expression:
<p>logical_or_expression conditional_expression_suffix</p>

conditional_expression_suffix:
<p>? expression : conditional_expression</p>
<p>epsilon</p>

assignment_expression:
<p>conditional_expression</p>
<p>unary_expression assignment_operator assignment_expression</p>

assignment_operator:
<p>=</p>
<p>MUL_ASSIGN</p>
<p>DIV_ASSIGN</p>
<p>MOD_ASSIGN</p>
<p>ADD_ASSIGN</p>
<p>SUB_ASSIGN</p>
<p>LEFT_ASSIGN</p>
<p>RIGHT_ASSIGN</p>
<p>AND_ASSIGN</p>
<p>XOR_ASSIGN</p>
<p>OR_ASSIGN</p>

expression:
<p>assignment_expression expression_suffix</p>

expression_suffix:
<p>, assignment_expression expression_suffix</p>
<p>epsilon</p>

constant_expression:
<p>conditional_expression</p>