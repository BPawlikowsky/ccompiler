start:
<p>translation_unit</p>

primary_expression:
<p>IDENTIFIER</p>
<p>CONSTANT</p>
<p>STRING_LITERAL</p>
<p>( expression )</p>

postfix_expression:
<p>primary_expression primary_expression_ops postfix_expression_tail</p>

postfix_expression_tail:
<p>primary_expression primary_expression_ops postfix_expression_tail</p>
<p>epsilon</p>

primary_expression_ops:
<p>[ expression ]</p>
<p>( primary_expression_ops_args</p>
<p>. IDENTIFIER</p>
<p>PTR_OP IDENTIFIER</p>
<p>unary_expression_prefix</p>

primary_expression_ops_args:
<p>)</p>
<p>expression )</p>

unary_expression:
<p>postfix_expression</p>
<p>unary_expression_prefix unary_expression</p>
<p>unary_operator cast_expression</p>
<p>SIZEOF unary_expression_sizeof</p>

unary_expression_prefix:
<p>INC_OP</p>
<p>DEC_OP</p>

unary_expression_sizeof:
<p>unary_expression</p>
<p>type_name_paren</p>


unary_operator:
<p>&</p>
<p>*</p>
<p>+</p>
<p>-</p>
<p>~</p>
<p>!</p>

cast_expression:
<p>unary_expression</p>
<p>type_name_paren cast_expression</p>

type_name_paren:
<p>( type_name )</p>

multiplicative_expression:
<p>cast_expression multiplicative_expression_tail</p>

multiplicative_expression_tail:
<p>* cast_expression multiplicative_expression_tail</p>
<p>/ cast_expression multiplicative_expression_tail</p>
<p>% cast_expression multiplicative_expression_tail</p>
<p>epsilon</p>

additive_expression:
<p>multiplicative_expression additive_expression_tail</p>

additive_expression_tail:
<p>+ multiplicative_expression additive_expression_tail</p>
<p>- multiplicative_expression additive_expression_tail</p>
<p>epsilon</p>

shift_expression:
<p>additive_expression shift_expression_tail</p>

shift_expression_tail:
<p>LEFT_OP additive_expression shift_expression_tail</p>
<p>RIGHT_OP additive_expression shift_expression_tail</p>
<p>epsilon</p>

relational_expression:
<p>shift_expression relational_expression_tail</p>

relational_expression_tail:
<p>< shift_expression relational_expression_tail</p>
<p>> shift_expression relational_expression_tail</p>
<p>LE_OP shift_expression relational_expression_tail</p>
<p>GE_OP shift_expression relational_expression_tail</p>
<p>epsilon</p>

equality_expression:
<p>relational_expression equality_expression_tail</p>

equality_expression_tail:
<p>EQ_OP relational_expression equality_expression_tail</p>
<p>NE_OP relational_expression equality_expression_tail</p>
<p>epsilon</p>

and_expression:
<p>equality_expression and_expression_tail</p>

and_expression_tail:
<p>& equality_expression and_expression_tail</p>
<p>epsilon</p>

exclusive_or_expression:
<p>and_expression exclusive_or_expression_tail</p>

exclusive_or_expression_tail:
<p>^ and_expression exclusive_or_expression_tail</p>
<p>epsilon</p>

inclusive_or_expression:
<p>exclusive_or_expression inclusive_or_expression_tail</p>

inclusive_or_expression_tail:
<p>| exclusive_or_expression inclusive_or_expression_tail</p>
<p>epsilon</p>

logical_and_expression:
<p>inclusive_or_expression logical_and_expression_tail</p>

logical_and_expression_tail:
<p>AND_OP inclusive_or_expression logical_and_expression_tail</p>
<p>epsilon</p>

logical_or_expression:
<p>logical_and_expression logical_or_expression_tail</p>

logical_or_expression_tail:
<p>OR_OP logical_and_expression logical_or_expression_tail</p>
<p>epsilon</p>

conditional_expression:
<p>logical_or_expression conditional_expression_tail</p>

conditional_expression_tail:
<p>? expression : conditional_expression conditional_expression_tail</p>
<p>epsilon</p>

assignment_expression:
<p>logical_or_expression conditional_expression_tail</p>
<p>unary_expression assignment_operator assignment_expression</p>

assignment_operator:
<p>=</p>
<p>MUL_ASSIGN</p>
<p>DIV_ASSIGN</p>
<p>MOD_ASSIGN</p>
<p>ADD_ASSIGN</p>
<p>SUB_ASSIGN</p>
<p>LEFT_ASSIGN</p>
<p>RIGHT_ASSIGN</p>
<p>AND_ASSIGN</p>
<p>XOR_ASSIGN</p>
<p>OR_ASSIGN</p>

expression:
<p>assignment_expression expression_tail</p>

expression_tail:
<p>, assignment_expression expression_tail</p>
<p>epsilon</p>

constant_expression:
<p>conditional_expression</p>

declaration:
<p>declaration_specifiers init_declarator_list_opt ;</p>

init_declarator_list_opt:
<p>init_declarator_list</p>
<p>epsilon</p>

declaration_specifiers:
<p>declaration_specifiers_prefix declaration_specifiers_tail</p>

declaration_specifiers_prefix:
<p>storage_class_specifier</p>
<p>specifier_qualifier_list_prefix</p>

declaration_specifiers_tail:
<p>declaration_specifiers_prefix declaration_specifiers_tail</p>
<p>epsilon</p>


init_declarator_list:
<p>init_declarator init_declarator_list_tail</p>

init_declarator_list_tail:
<p>, init_declarator init_declarator_list_tail</p>
<p>epsilon</p>

init_declarator:
<p>declarator init_declarator_suffix</p>

init_declarator_suffix:
<p>= initializer</p>
<p>epsilon</p>

storage_class_specifier:
<p>typedef</p>
<p>extern</p>
<p>static</p>
<p>auto</p>
<p>register</p>

type_specifier:
<p>void</p>
<p>char</p>
<p>short</p>
<p>int</p>
<p>long</p>
<p>float</p>
<p>double</p>
<p>signed</p>
<p>unsigned</p>
<p>struct_or_union_specifier</p>
<p>enum_specifier</p>
<p>TYPE_NAME</p>

struct_or_union_specifier:
<p>struct_or_union struct_or_union_specifier_suffix</p>

struct_or_union_specifier_suffix:
<p>IDENTIFIER struct_or_union_specifier_suffix_list_opt</p>
<p>{ struct_declaration_list }</p>

struct_or_union_specifier_suffix_list_opt:
<p>{ struct_declaration_list }</p>
<p>epsilon</p>

struct_or_union:
<p>struct</p>
<p>union</p>

struct_declaration_list:
<p>struct_declaration struct_declaration_list_tail</p>

struct_declaration_list_tail:
<p>struct_declaration struct_declaration_list_tail</p>
<p>epsilon</p>

struct_declaration:
<p>specifier_qualifier_list struct_declarator_list ;</p>

specifier_qualifier_list:
<p>specifier_qualifier_list_prefix specifier_qualifier_list_opt</p>

specifier_qualifier_list_opt:
<p>specifier_qualifier_list</p>
<p>epsilon</p>

specifier_qualifier_list_prefix:
<p>type_specifier</p>
<p>type_qualifier</p>

struct_declarator_list:
<p>struct_declarator struct_declarator_list_tail</p>

struct_declarator_list_tail:
<p>, struct_declarator struct_declarator_list_tail</p>
<p>epsilon</p>

struct_declarator:
<p>: constant_expression</p>
<p>declarator struct_declarator_suffix</p>

struct_declarator_suffix:
<p>: constant_expression</p>
<p>epsilon</p>

enum_specifier:
<p>enum enum_specifier_suffix</p>

enum_specifier_suffix:
<p>{ enumerator_list }</p>
<p>IDENTIFIER enum_specifier_suffix_opt</p>

enum_specifier_suffix_opt:
<p>{ enumerator_list }</p>
<p>epsilon</p>

enumerator_list:
<p>enumerator enumerator_list_tail</p>

enumerator_list_tail:
<p>, enumerator enumerator_list_tail</p>
<p>epsilon</p>

enumerator:
<p>IDENTIFIER enumerator_suffix</p>

enumerator_suffix:
<p>ENUM_EQ constant_expression</p>
<p>epsilon</p>

type_qualifier:
<p>const</p>
<p>volatile</p>

declarator:
<p>pointer direct_declarator</p>
<p>direct_declarator</p>

direct_declarator:
<p>direct_declarator_prefix direct_declarator_ops direct_declarator_tail</p>

direct_declarator_prefix:
<p>IDENTIFIER</p>
<p>( declarator )</p>

direct_declarator_tail:
<p>direct_declarator_prefix direct_declarator_ops direct_declarator_tail</p>
<p>epsilon</p>

direct_declarator_ops:
<p>[ direct_declarator_ops_array</p>
<p>( direct_declarator_ops_func</p>

direct_declarator_ops_array:
<p>constant_expression ]</p>
<p>]</p>

direct_declarator_ops_func:
<p>parameter_type_list )</p>
<p>identifier_list )</p>
<p>)</p>

pointer:
<p>* pointer_suffix</p>

pointer_suffix:
<p>type_qualifier_list</p>
<p>type_qualifier_list pointer</p>
<p>pointer</p>
<p>epsilon</p>

type_qualifier_list:
<p>type_qualifier type_qualifier_list_tail</p>

type_qualifier_list_tail:
<p>type_qualifier type_qualifier_list_tail</p>
<p>epsilon</p>


parameter_type_list:
<p>parameter_list parameter_type_list_tail</p>

parameter_type_list_tail:
<p>parameter_list parameter_type_list_tail</p>
<p>, parameter_type_list_tail ELLIPSIS</p>
<p>epsilon</p>

parameter_list:
<p>parameter_declaration parameter_list_tail</p>

parameter_list_tail:
<p>, parameter_declaration parameter_list_tail</p>
<p>epsilon</p>

parameter_declaration:
<p>declaration_specifiers parameter_declaration_suffix</p>

parameter_declaration_suffix:
<p>declarator</p>
<p>abstract_declarator</p>
<p>epsilon</p>

identifier_list:
<p>IDENTIFIER identifier_list_tail</p>

identifier_list_tail:
<p>, IDENTIFIER identifier_list_tail</p>
<p>epsilon</p>

type_name:
<p>specifier_qualifier_list type_name_suffix</p>

type_name_suffix:
<p>abstract_declarator</p>
<p>epsilon</p>

abstract_declarator:
<p>pointer abstract_declarator_suffix</p>
<p>direct_abstract_declarator</p>

abstract_declarator_suffix:
<p>direct_abstract_declarator</p>
<p>epsilon</p>

direct_abstract_declarator:
<p>( direct_abstract_declarator_paren_suffix</p>
<p>[ direct_abstract_declarator_array</p>
<p>direct_abstract_declarator direct_abstract_declarator_suffix</p>

direct_abstract_declarator_suffix:
<p>[ direct_abstract_declarator_array</p>
<p>( direct_abstract_declarator_func</p>

direct_abstract_declarator_paren_suffix:
<p>abstract_declarator )</p>
<p>direct_abstract_declarator_func</p>

direct_abstract_declarator_array:
<p>]</p>
<p>constant_expression ]</p>

direct_abstract_declarator_func:
<p>)</p>
<p>parameter_type_list )</p>

initializer:
<p>unary_expression assignment_expression_tail</p>
<p>{ initializer_list initializer_suffix</p>

initializer_suffix:
<p>}</p>
<p>, }</p>

initializer_list:
<p>initializer initializer_list_tail</p>

initializer_list_tail:
<p>, initializer initializer_list_tail</p>
<p>epsilon</p>

statement:
<p>labeled_statement</p>
<p>compound_statement</p>
<p>expression_statement</p>
<p>selection_statement</p>
<p>iteration_statement</p>
<p>jump_statement</p>

labeled_statement:
<p>labeled_statement_prefix : statement</p>

labeled_statement_prefix:
<p>LABEL_IDENTIFIER</p>
<p>CASE constant_expression</p>
<p>DEFAULT</p>

compound_statement:
<p>{ compound_statement_suffix</p>

compound_statement_suffix:
<p>compound_statement_suffix_decl</p>
<p>declaration_list compound_statement_suffix_decl</p>

compound_statement_suffix_decl:
<p>statement_list_opt }</p>

statement_list_opt:
<p>statement_list</p>
<p>epsilon</p>

declaration_list:
<p>declaration declaration_list_tail</p>

declaration_list_tail:
<p>declaration declaration_list_tail</p>
<p>epsilon</p>

statement_list:
<p>statement statement_list_tail</p>

statement_list_tail:
<p>statement statement_list_tail</p>
<p>epsilon</p>

expression_statement:
<p>;</p>
<p>expression ;</p>

selection_statement:
<p>if ( expression ) statement selection_statement_suffix</p>
<p>switch ( expression ) statement</p>

selection_statement_suffix:
<p>else statement</p>
<p>epsilon</p>

iteration_statement:
<p>while ( expression ) while_suffix</p>
<p>do statement while ( expression ) while_suffix</p>
<p>for ( expression_statement expression_statement expression_opt ) statement</p>

while_suffix:
<p>;</p>
<p>statement</p>

expression_opt:
<p>expression</p>
<p>epsilon</p>

jump_statement:
<p>GOTO IDENTIFIER ;</p>
<p>CONTINUE ;</p>
<p>BREAK ;</p>
<p>return ;</p>
<p>return expression ;</p>

translation_unit:
<p>external_declaration translation_unit_tail</p>

translation_unit_tail:
<p>external_declaration translation_unit_tail</p>
<p>epsilon</p>

external_declaration:
<p>function_definition</p>
<p>declaration</p>

function_definition:
<p>declaration_specifiers declarator function_definition_decl_specifiers ;</p>
<p>declarator function_definition_decl_specifiers ;</p>

function_definition_decl_specifiers:
<p>declaration_list compound_statement</p>
<p>compound_statement</p>
