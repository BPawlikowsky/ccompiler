start:
<p>translation-unit</p>

primary-expression:
<p>identifier</p>
<p>constant</p>
<p>string-literal</p>
<p>( expression )</p>

postfix-expression:
<p>primary-expression postfix-operator postfix-expression-tail</p>

postfix-expression-tail:
<p>postfix-operator postfix-expression-tail</p>
<p>epsilon</p>


postfix-operator:
<p>[ expression ]</p>
<p>( argument-expression-list-opt )</p>
<p>. identifier</p>
<p>-> identifier</p>
<p>++</p>
<p>--</p>

argument-expression-list-opt:
<p>argument-expression-list</p>
<p>epsilon</p>

argument-expression-list:
<p>assignment-expression argument-expression-list-tail</p>

argument-expression-list-tail:
<p>, assignment-expression argument-expression-list-tail</p>
<p>epsilon</p>

unary-expression:
<p>postfix-expression</p>
<p>unary-expression-prefix unary-expression-tail</p>
<p>unary-operator cast-expression</p>

unary-expression-prefix:
<p>++</p>
<p>--</p>
<p>sizeof</p>

unary-expression-tail:
<p>postfix-expression</p>
<p>unary-operator cast-expression</p>
<p>epsilon</p>

unary-operator:
<p>&</p>
<p>*</p>
<p>+</p>
<p>-</p>
<p>~</p>
<p>!</p>

cast-expression:
<p>( type-name ) cast-expression-tail</p>

cast-expression-tail:
<p>unary-operator unary-expression</p>
<p>postfix-expression</p>

multiplicative-expression:
<p>cast-expression multiplicative-expression-tail</p>

multiplicative-expression-tail:
<p>multiplicative-expression-tail-prefix cast-expression multiplicative-expression</p>
<p>epsilon</p>

multiplicative-expression-tail-prefix:
<p>*</p>
<p>/</p>
<p>%</p>

additive-expression:
<p>multiplicative-expression additive-expression-tail</p>

additive-expression-tail:
<p>+ multiplicative-expression additive-expression-tail</p>
<p>- multiplicative-expression additive-expression-tail</p>
<p>epsilon</p>

shift-expression:
<p>additive-expression shift-expression-tail</p>

shift-expression-tail:
<p><< additive-expression shift-expression-tail</p>
<p>>> additive-expression shift-expression-tail</p>
<p>epsilon</p>

relational-expression:
<p>shift-expression relational-expression-tail</p>

relational-expression-tail:
<p>< shift-expression relational-expression-tail</p>
<p>> shift-expression relational-expression-tail</p>
<p><= shift-expression relational-expression-tail</p>
<p>>= shift-expression relational-expression-tail</p>
<p>epsilon</p>

equality-expression:
<p>relational-expression equality-expression-tail</p>

equality-expression-tail:
<p>== relational-expression equality-expression-tail</p>
<p>!= relational-expression equality-expression-tail</p>
<p>epsilon</p>

AND-expression:
<p>equality-expression AND-expression-tail</p>

AND-expression-tail:
<p>& equality-expression AND-expression-tail</p>
<p>epsilon</p>

exclusive-OR-expression:
<p>AND-expression exclusive-OR-expression-tail</p>

exclusive-OR-expression-tail:
<p>^ AND-expression exclusive-OR-expression-tail</p>
<p>epsilon</p>

inclusive-OR-expression:
<p>exclusive-OR-expression inclusive-OR-expression-tail</p>

inclusive-OR-expression-tail:
<p>| exclusive-OR-expression inclusive-OR-expression-tail</p>
<p>epsilon</p>

logical-AND-expression:
<p>inclusive-OR-expression logical-AND-expression-tail</p>

logical-AND-expression-tail:
<p>&& inclusive-OR-expression logical-AND-expression-tail</p>
<p>epsilon</p>

logical-OR-expression:
<p>logical-AND-expression logical-OR-expression-tail</p>

logical-OR-expression-tail:
<p>|| logical-AND-expression logical-OR-expression-tail</p>
<p>epsilon</p>

conditional-expression:
<p>logical-OR-expression conditional-expression-tail</p>

conditional-expression-tail:
<p>? expression : conditional-expression-tail</p>
<p>epsilon</p>

assignment-expression:
<p>unary-expression assignment-operator assignment-expression</p>
<p>conditional-expression</p>

assignment-operator:
<p>=</p>
<p>*=</p>
<p>/=</p>
<p>%=</p>
<p>+=</p>
<p>-=</p>
<p><<=</p>
<p>>>=</p>
<p>&=</p>
<p>^=</p>
<p>|=</p>

expression:
<p>assignment-expression expression-tail</p>

expression-tail:
<p>, assignment-expression expression-tail</p>
<p>epsilon</p>

constant-expression:
<p>conditional-expression</p>



// DECLARATIONS


declaration:
<p>declaration-specifiers declaration-suffix</p>

declaration-suffix:
<p>init-declarator-list ;</p>
<p>;</p>

declaration-specifiers:
<p>single-specifier declaration-specifiers-tail</p>

declaration-specifiers-tail:
<p>storage-class-specifier declaration-specifiers-tail</p>
<p>type-specifier declaration-specifiers-tail</p>
<p>type-qualifier declaration-specifiers-tail</p>
<p>function-specifier declaration-specifiers-tail</p>
<p>epsilon</p>

single-specifier:
<p>storage-class-specifier</p>
<p>type-specifier</p>
<p>type-qualifier</p>
<p>function-specifier</p>

init-declarator-list:
<p>init-declarator init-declarator-list-tail</p>

init-declarator-list-tail:
<p>, init-declarator init-declarator-list-tail</p>
<p>epsilon</p>

init-declarator:
<p>declarator init-declarator-tail</p>

init-declarator-tail:
<p>= initializer</p>
<p>epsilon</p>

storage-class-specifier:
<p>auto</p>
<p>extern</p>
<p>register</p>
<p>static</p>
<p>typedef</p>

type-specifier:
<p>void</p>
<p>char</p>
<p>short</p>
<p>int</p>
<p>long</p>
<p>float</p>
<p>double</p>
<p>signed</p>
<p>unsigned</p>
<p>struct-or-union-specifier</p>
<p>enum-specifier</p>
<p>typedef-name</p>

struct-or-union-specifier:
<p>struct-or-union struct-or-union-specifier-tail</p>

struct-or-union-specifier-tail:
<p>identifier struct-or-union-specifier-decl-list</p>
<p>{ struct-declaration-list }</p>


struct-or-union-specifier-decl-list:
<p>{ struct-declaration-list }</p>
<p>epsilon</p>

struct-or-union:
<p>struct</p>
<p>union</p>

struct-declaration-list:
<p>struct-declaration struct-declaration-list-tail</p>

struct-declaration-list-tail:
<p>struct-declaration struct-declaration-list-tail</p>
<p>epsilon</p>

struct-declaration:
<p>specifier-qualifier-list struct-declarator-list ;</p>

specifier-qualifier-list:
<p>type-specifier specifier-qualifier-list-opt</p>
<p>type-qualifier specifier-qualifier-list-opt</p>

specifier-qualifier-list-opt:
<p>specifier-qualifier-list</p>
<p>epsilon</p>

struct-declarator-list:
<p>struct-declarator struct-declarator-list-tail</p>

struct-declarator-list-tail:
<p>, struct-declarator struct-declarator-list-tail</p>
<p>epsilon</p>

struct-declarator:
<p>declarator struct-declarator-tail</p>

struct-declarator-tail:
<p>: constant-expression</p>
<p>epsilon</p>

enum-specifier:
<p>enum identifier enum-specifier-suffix</p>

enum-specifier-suffix:
<p>{ enumerator-list }</p>
<p>epsilon</p>

enumerator-list:
<p>enumerator enumerator-list-tail</p>

enumerator-list-tail:
<p>, enumerator enumerator-list-tail</p>
<p>epsilon</p>

enumerator:
<p>enumeration-constant enumerator-suffix</p>

enumerator-suffix:
<p>= constant-expression</p>
<p>epsilon</p>

type-qualifier:
<p>const</p>
<p>restrict</p>
<p>volatile</p>

function-specifier:
<p>inline</p>
<p>_Noreturn</p>

declarator:
<p>pointer direct-declarator</p>
<p>direct-declarator</p>

direct-declarator:
<p>identifier direct-declarator-tail</p>
<p>( declarator ) direct-declarator-tail</p>
<p>) direct-declarator-tail</p>

direct-declarator-tail:
<p>[ direct-declarator-paren-b ] direct-declarator-tail</p>
<p>( direct-declarator-function</p>
<p>epsilon</p>

direct-declarator-function:
<p>parameter-type-list ) direct-declarator-tail</p>
<p>) direct-declarator-tail</p>

direct-declarator-paren-b:
<p>constant-expression</p>
<p>epsilon</p>


pointer:
<p>* type-qualifier-list pointer-suffix</p>

pointer-suffix:
<p>* type-qualifier-list pointer-suffix</p>
<p>epsilon</p>

type-qualifier-list:
<p>type-qualifier type-qualifier-list-tail</p>
<p>epsilon</p>

type-qualifier-list-tail:
<p>type-qualifier type-qualifier-list-tail</p>
<p>epsilon</p>

parameter-type-list:
<p>parameter-list</p>
<p>epsilon</p>

// parameter-type-list-tail:
// <p>, parameter-type-list-tail-suffix</p>
// <p>epsilon</p>
// 
// parameter-type-list-tail-suffix:
// <p>parameter-list parameter-type-list-tail</p>
// <p>...</p>

parameter-list:
<p>parameter-declaration parameter-list-tail</p>

parameter-list-tail:
<p>, parameter-declaration parameter-list-tail</p>
<p>epsilon</p>

parameter-declaration:
<p>declaration-specifiers parameter-declaration-suffix</p>

parameter-declaration-suffix:
<p>declarator</p>
<p>epsilon</p>

// ------


abstract-parameter-type-list:
<p>abstract-parameter-list abstract-parameter-type-list-tail</p>
<p>epsilon</p>

abstract-parameter-type-list-tail:
<p>, abstract-parameter-type-list-tail-suffix</p>
<p>epsilon</p>

abstract-parameter-type-list-tail-suffix:
<p>abstract-parameter-list abstract-parameter-type-list-tail</p>
<p>...</p>

abstract-parameter-list:
<p>abstract-parameter-declaration abstract-parameter-list-tail</p>

abstract-parameter-list-tail:
<p>, abstract-parameter-declaration abstract-parameter-list-tail</p>
<p>epsilon</p>

abstract-parameter-declaration:
<p>declaration-specifiers abstract-parameter-declaration-suffix</p>

abstract-parameter-declaration-suffix:
<p>abstract-declarator</p>
<p>epsilon</p>


// ------

// identifier-list:
// <p>identifier identifier-list-tail</p>
// 
// identifier-list-tail:
// <p>, identifier identifier-list-tail</p>
// <p>epsilon</p>

type-name:
<p>specifier-qualifier-list abstract-declarator-tail</p>

abstract-declarator:
<p>pointer abstract-declarator-suffix</p>

abstract-declarator-suffix:
<p>direct-abstract-declarator</p>
<p>epsilon</p>

direct-abstract-declarator:
<p>( abstract-declarator ) abstract-declarator-tail</p>

abstract-declarator-tail:
<p>direct-abstract-declarator abstract-declarator-tail-suffix</p>
<p>epsilon</p>

abstract-declarator-tail-suffix:
<p>[ type-qualifier-list assignment-expression ] abstract-declarator-tail</p>
<p>( abstract-parameter-type-list ) abstract-declarator-tail</p>

typedef-name:
<p>typedefname</p>

initializer:
<p>assignment-expression</p>
<p>{ initializer-list }</p>

initializer-list:
<p>designation initializer initializer-list-tail</p>

initializer-list-tail:
<p>, designation initializer initializer-list-tail</p>
<p>epsilon</p>

designation:
<p>designator-list =</p>

designator-list:
<p>designator designator-list-tail</p>

designator-list-tail:
<p>designator designator-list-tail</p>
<p>epsilon</p>

designator:
<p>[ constant-expression ]</p>
<p>. identifier</p>

statement:
<p>labeled-statement</p>
<p>compound-statement</p>
<p>expression-statement</p>
<p>selection-statement</p>
<p>iteration-statement</p>
<p>jump-statement</p>

jump-statement:
<p>goto identifier ;</p>
<p>continue ;</p>
<p>break ;</p>
<p>return expression ;</p>

compound-statement:
<p>{ declaration-list statement-list }</p>

declaration-list:
<p>declaration declaration-list-tail</p>

declaration-list-tail:
<p>declaration declaration-list-tail</p>
<p>epsilon</p>

statement-list:
<p>statement statement-list-tail</p>

statement-list-tail:
<p>statement statement-list-tail</p>
<p>epsilon</p>

expression-statement:
<p>expression ;</p>

iteration-statement:
<p>while ( expression ) statement</p>
<p>do statement while ( expression ) ;</p>
<p>for ( expression ; expression ; expression ) statement</p>

selection-statement:
<p>if ( expression ) statement selection-statement-helper</p>
<p>switch ( expression ) statement</p>

selection-statement-helper:
<p>else statement</p>
<p>epsilon</p>

labeled-statement:
<p>case constant-expression : statement</p>

translation-unit:
<p>external-declaration translation-unit-tail</p>

translation-unit-tail:
<p>external-declaration translation-unit-tail</p>
<p>epsilon</p>

external-declaration:
<p>declaration-specifiers external-declaration-tail</p>

external-declaration-tail:
<p>declarator external-declaration-tail-suffix</p>

external-declaration-tail-suffix:
<p>declaration-list compound-statement</p>
<p>compound-statement</p>
<p>init-declarator-tail ; external-dec-init-declarator-list-tail</p>
<p>; external-dec-init-declarator-list-tail</p>

external-dec-init-declarator-list-tail:
<p>, init-declarator external-dec-init-declarator-list-tail</p>
<p>epsilon</p>
